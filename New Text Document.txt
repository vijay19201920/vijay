 Git has three main states that your files can reside in: committed, modified, and staged. Committed means that the data is safely stored in your local database. Modified means that you have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
 
 1) $ git clone <url from repository> eg - $ git clone https://github.com/vijay19201920/vijay.git;
 
 This is used to get the checkout on the folder
 
 2) $ git status :- This will give the status of the folder if any file is added or commited ot need to be commited.
 3) $ git add. :- This will add all the files on that particular folder.
 4) $ git add <file name in ""> :- This will add only the file named.
 5) $ git commit -m <commit message in inverted comma> :- This is used to commit the file aftyer adding command inorder to push the file.
 6) $ git push origin :- This will add the file to push on the origin branch or master branch.
 7) $ git checkout -b <branch> :-  In Git 1.7.0 and later, you can checkout a new branch or create a new branch
 8) $ git push -u origin <branch> :-- Edit files, add and commit. Then push with the -u (short for --set-upstream) option or push a new branch to repository.
 9) $ git checkout <branch name> :- This command is used to switch the branches
 10) All the git branches will be under origin.
 11) $ git checkout -- "New Text Document.txt" :- This will revert to previous content of the file.
 12) $ git commit -am "add comment"   this will add and commit both
 13) Adding a remote -> To add a new remote, use the git remote add command on the terminal, in the directory your repository is stored at.

				   The git remote add command takes two arguments:

					A remote name, for example, origin
					A remote URL, for example, https://github.com/user/repo.git
14) Git rebase -> The git rebase command allows you to easily change a series of commits, modifying the history of your repository. You can reorder, edit, or squash commits together.

			Typically, you would use git rebase to:
			Edit previous commit messages
			Combine multiple commits into one
			Delete or revert commits that are no longer necessary
					
					

 
 
 
 
 
 
 
 
########################END OF FILE##############################################

